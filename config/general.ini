# This is a config file with the settings for a specific orthophoto 
# segmentation.

[general]
# The subject that will be segmented -> must be specified in a specific ini file!!!
segment_subject = MUST_OVERRIDE

[email]
smtp_server = ALV-MAIL-P1.DG3.be
from = pieter.roggemans@lv.vlaanderen.be 
to = pieter.roggemans@lv.vlaanderen.be

[train]
# The batch size to use. Depends on available hardware and model used.
batch_size_fit = 8
batch_size_predict = 20

max_epoch = 1000

# Info about the images used to train on
# Remark: because the training data is quite specific for an image datasource,
#         always specify the train image_datasource_code per subject
image_datasource_code = MUST_OVERRIDE 
image_pixel_width = 512
image_pixel_height = 512
image_pixel_x_size = 0.25
image_pixel_y_size = 0.25

[predict]
# The batch size to use. Depends on available hardware and model used.
batch_size = 14

# Info about the source images that need to be predicted
image_datasource_code = BEFL_2018
image_pixel_width = 1024
image_pixel_height = 1024
image_pixel_x_size = 0.25
image_pixel_y_size = 0.25
image_pixels_overlap = 128

[model]
# The segmentation architecture to use for the subject
encoder = inceptionresnetv2
decoder = unet
architecture = ${encoder}+${decoder}

# Force to use a model trained on this traindata version (-1 to disable) -> only overrule in local_overrule.ini!
force_model_traindata_version = -1
# When training, resume training on the corrent best existing model -> only overrule in local_overrule.ini!
resume_train = False

[dirs]
# The base dir where the info for all segmentation projects is stored
base_dir = X:\Monitoring\OrthoSeg

# The job dir
job_dir = ${base_dir}\job

# The project directory for this subject
project_dir = ${base_dir}\${general:segment_subject}

# Training dirs in the project
input_labels_dir = ${project_dir}\input_labels

training_dir = ${project_dir}\training
training_train_basedir = ${training_dir}\train
training_validation_basedir = ${training_dir}\validation
training_test_basedir = ${training_dir}\test
image_subdir = image
mask_subdir = mask

# Log dirs
log_dir = ${project_dir}\log
log_training_dir = ${training_dir}\log

# Model dir
model_dir = ${project_dir}\models

# Output vector dir
output_vector_dir = ${project_dir}\output_vector

# Dir with the images we want predictions for
base_image_dir = \\dg3.be\alp\gistmp\orthoseg\input_images
predict_image_input_subdir = ${predict:image_pixel_width}x${predict:image_pixel_height}_${predict:image_pixels_overlap}pxOverlap
predict_image_input_dir = ${base_image_dir}\${predict:image_datasource_code}\${predict_image_input_subdir}
predict_image_output_basedir = ${predict_image_input_dir}

# Dir with sample images for use during training
# Remark: these samples are meant to check the training quality, so typicaly
#         the train image image datasource is used!!! 
predictsample_image_input_subdir = ${train:image_pixel_width}x${train:image_pixel_height}
predictsample_image_input_dir = ${base_image_dir}\{train:image_datasource_code}_testsample\${predictsample_image_input_subdir}
predictsample_image_output_basedir = ${predictsample_image_input_dir}

[files]
# Path to a file containing the region of interest where you want to apply the 
# segementation
roi_filepath = X:\GIS\GIS DATA\Gewesten\2005\Vlaanderen+Brussel\gew_VLenBR.shp

# File path that will be used to save/load the keras model definition
model_json_filepath = ${dirs:model_dir}\${model:architecture}.json

# File paths where the train, validation and test labels will be found
input_trainlabels_filepath = ${dirs:input_labels_dir}\${general:segment_subject}_trainlabels.shp
input_validationlabels_filepath = ${dirs:input_labels_dir}\${general:segment_subject}_validationlabels.shp
input_testlabels_filepath = ${dirs:input_labels_dir}\${general:segment_subject}_testlabels.shp

# Predefine a list of possible wms server layers we can use
# The datasource code is the part behind 'image_datasource_' 
[image_datasource_BEFL_2018]
wms_server_url = https://geoservices.informatievlaanderen.be/raadpleegdiensten/omw/wms?
wms_layernames = OMWRGB18VL
wms_layerstyles = default
projection = epsg:31370
wms_version = 1.3.0
grid_xmin=0
grid_ymin=0

[image_datasource_BEFL_2019_ofw]
wms_server_url = http://geoservices.informatievlaanderen.be/raadpleegdiensten/ofw/wms?
wms_layernames = ofw
wms_layerstyles = default
projection = epsg:31370
wms_version = 1.3.0
grid_xmin=0
grid_ymin=0

[image_datasource_BEFL_2015]
wms_server_url = http://geoservices.informatievlaanderen.be/raadpleegdiensten/OMZ/wms?
wms_layernames = OMZRGB15VL
wms_layerstyles = default
projection = epsg:31370
wms_version = 1.3.0
grid_xmin=0
grid_ymin=0

[image_datasource_BEFL_topo_1939]
wms_server_url = https://qgiscloud.com/theroggy/Orthoseg_topobuildings_cloud/wms?
wms_layernames = BEFL_TOPO_1904_2
wms_layerstyles = default
projection = epsg:31370
wms_version = 1.3.0
# (Max) nb of parallel calls (optional)
nb_concurrent_calls = 1
# Apply random nb of secs of sleep between calls (optional)
random_sleep = 5
bbox = 140000, 170000, 180000, 220000
grid_xmin=0
grid_ymin=0
image_pixels_ignore_border = 100

[image_datasource_LV_2018]
wms_server_url = https://karte.lad.gov.lv/arcgis/services/ortofoto/MapServer/WMSServer?
wms_layernames = 0
wms_layerstyles = default
projection = epsg:3059
wms_version = 1.3.0
bbox = 529920, 259840, 599808, 332800
grid_xmin=0
grid_ymin=0

[image_datasource_BEWAL_2018]
wms_server_url = https://geoservices.wallonie.be/arcgis/services/IMAGERIE/ORTHO_2018/MapServer/WMSServer?
wms_layernames = 0
wms_layerstyles = default
projection = epsg:31370
wms_version = 1.3.0
bbox = 162816, 116992, 196352, 147200
grid_xmin=0
grid_ymin=0
