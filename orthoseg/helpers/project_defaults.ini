# This is a config file with the settings for a specific orthophoto 
# segmentation.

[general]
# The subject that will be segmented -> must be specified in a specific ini file!!!
segment_subject = MUST_OVERRIDE

[train]
# The version of the set of hyper parameters to use while training. Can be used 
# if you want to train on and compare different (combinations of) hyperparameters.
hyperparams_version = 0

# Preload model -> only overrule in local_overrule.ini!
preload_with_previous_traindata = False
# Force to use a model trained on this traindata version (-1 to disable) -> only overrule in local_overrule.ini!
force_model_traindata_version = -1
# When training, resume training on the corrent best existing model -> only overrule in local_overrule.ini!
resume_train = False
# Train a model, even if a model exists already 
force_train = False

# In json format, label names to burn, and which value to attribute to them
label_names_burn_values = { "${general:segment_subject}": 255 }

# Image layer to use to get train images from
# Remark: only needs to be defined if only one label datasource is used. If 
# multiple label_datasources are defined, the need to be hardcoded there.
image_layer = MUST_OVERRIDE

# Info about the label files to be used, in json format.
# Remark: it is possible to define/use multiple label data sources
label_datasources = {
                        "label_ds0":{   
                            "locations_path": "${dirs:labels_dir}/${general:segment_subject}_labellocations_${image_layer}.gpkg",
                            "data_path": "${dirs:labels_dir}/${general:segment_subject}_labeldata_${image_layer}.gpkg",
                            "image_layer": "${train:image_layer}"
                        }
                    }

# The batch size to use. Depends on available hardware and model used.
batch_size_fit = 6
batch_size_predict = 20

max_epoch = 1000

# Info about the images used to train on
image_pixel_width = 512
image_pixel_height = 512
image_pixel_x_size = 0.25
image_pixel_y_size = 0.25

# Image augmentations in json format
# Removed "brightness_range": (0.95,1.05)
image_augmentations = { "fill_mode": "constant",
                        "cval": 0,
                        "rescale": 0.0039215686274509803921568627451,
                        "rotation_range": 359.0,
                        "width_shift_range": 0.05,
                        "height_shift_range": 0.05,
                        "zoom_range": 0.1
                    }

# Mask augmentations in json format
# Remark: the number of randomized values must be the same as for the image, 
# otherwise the random augentations of the mask aren't the same as the image!!!
# Removed "brightness_range": (0.95,1.05)
mask_augmentations = {  "fill_mode": "constant",
                        "cval": 0,
                        "rescale": 0.0039215686274509803921568627451,
                        "rotation_range": 359.0,
                        "width_shift_range": 0.05,
                        "height_shift_range": 0.05,
                        "zoom_range": 0.1
                    }

[predict]
# The batch size to use. Depends on available hardware and model used.
batch_size = 4

# Info about the source images that need to be predicted
image_layer = BEFL_2019
image_pixel_width = 2048
image_pixel_height = 2048
image_pixel_x_size = 0.25
image_pixel_y_size = 0.25
image_pixels_overlap = 128

[model]
# The segmentation architecture to use for the subject
encoder = inceptionresnetv2
decoder = unet
architecture = ${encoder}+${decoder}
nb_channels = 3

[dirs]
# Remarks: 
#     - UNC paths are not supported on Windows, always use mapped drive letters!
#     - always use forward slashes, even on Windows systems

# The base proijects dir where all segmentation projects are stored
projects_dir = ./projects_sample

# The project directory for this subject
project_dir = ${projects_dir}/${general:segment_subject}

# Training dirs in the project
labels_dir = ${project_dir}/labels
training_dir = ${project_dir}/training

# Log dirs
log_dir = ${project_dir}/log
log_training_dir = ${training_dir}/log

# Model dir
model_dir = ${project_dir}/models

# Output vector dir
output_vector_dir = ${project_dir}/output_vector

# Dir with the images we want predictions for
base_image_dir = ${projects_dir}/_image_cache
predict_image_input_subdir = ${predict:image_pixel_width}x${predict:image_pixel_height}_${predict:image_pixels_overlap}pxOverlap
predict_image_input_dir = ${base_image_dir}/${predict:image_layer}/${predict_image_input_subdir}
predict_image_output_basedir = ${predict_image_input_dir}

# Dir with sample images for use during training
# Remark: these samples are meant to check the training quality, so by default
#         the train image size is used!!! 
predictsample_image_input_subdir = ${train:image_pixel_width}x${train:image_pixel_height}
predictsample_image_input_dir = ${base_image_dir}/${predict:image_layer}_testsample/${predictsample_image_input_subdir}
predictsample_image_output_basedir = ${predictsample_image_input_dir}

[files]
# File path that will be used to save/load the keras model definition
model_json_filepath = ${dirs:model_dir}/${model:architecture}.json
